# Generated by Django 5.2.3 on 2025-06-26 19:59

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import farm2market_backend.coreF2M.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('coreF2M', '0004_adminrole_adminroleassignment'),
    ]

    operations = [
        migrations.AlterField(
            model_name='buyerprofile',
            name='buyer',
            field=models.OneToOneField(db_column='buyer_id', limit_choices_to={'user_type': 'Buyer'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='buyerprofile',
            name='date_of_birth',
            field=models.DateField(blank=True, null=True, validators=[farm2market_backend.coreF2M.models.validate_minimum_age]),
        ),
        migrations.AlterField(
            model_name='buyerprofile',
            name='delivery_address',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Address can only contain letters, numbers, spaces, commas, periods, and hyphens', regex='^[a-zA-Z0-9\\s,.-]+$')]),
        ),
        migrations.AlterField(
            model_name='buyerprofile',
            name='delivery_time_preferences',
            field=models.CharField(blank=True, help_text='Comma-separated delivery time preferences', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='buyerprofile',
            name='location',
            field=models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Location can only contain letters, spaces, commas, periods, and hyphens', regex='^[a-zA-Z\\s,.-]+$')]),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='Category name can only contain letters, spaces, ampersands, and hyphens', regex='^[a-zA-Z\\s&-]+$')]),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='email',
            field=models.EmailField(help_text='Must be a valid, unique email address', max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Enter a valid email address')]),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_approved',
            field=models.BooleanField(default=False, help_text='Whether the user account has been approved by admin'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='phone_number',
            field=models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?[1-9]\\d{1,14}$')]),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='user_type',
            field=models.CharField(choices=[('Farmer', 'Farmer'), ('Buyer', 'Buyer'), ('Admin', 'Admin')], help_text='User role in the system', max_length=10),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='description',
            field=models.TextField(blank=True, help_text='Product description (max 1000 characters)', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='farmer',
            field=models.ForeignKey(db_column='farmer_id', limit_choices_to={'is_approved': True, 'user_type': 'Farmer'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='image_url',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='price',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='Price must be greater than 0')]),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='product_name',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Product name can only contain letters, spaces, ampersands, and hyphens', regex='^[a-zA-Z\\s&-]+$')]),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='quantity',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Quantity must be at least 1')]),
        ),
        migrations.AlterField(
            model_name='farmerlisting',
            name='quantity_unit',
            field=models.CharField(choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('basket', 'Basket'), ('bag', 'Bag'), ('cartoon', 'Cartoon'), ('piece', 'Piece'), ('bunch', 'Bunch'), ('liter', 'Liter')], default='kg', max_length=20),
        ),
        migrations.AlterField(
            model_name='farmerprofile',
            name='farmer',
            field=models.OneToOneField(db_column='farmer_id', limit_choices_to={'user_type': 'Farmer'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='farmerprofile',
            name='location',
            field=models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Location can only contain letters, spaces, commas, periods, and hyphens', regex='^[a-zA-Z\\s,.-]+$')]),
        ),
        migrations.AlterField(
            model_name='farmerprofile',
            name='trust_badge',
            field=models.BooleanField(default=False, help_text='Indicates if farmer has earned trust badge'),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='approved_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'user_type__in': ['Farmer', 'Admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reservations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='buyer',
            field=models.ForeignKey(db_column='buyer_id', limit_choices_to={'is_approved': True, 'user_type': 'Buyer'}, on_delete=django.db.models.deletion.CASCADE, related_name='buyer_reservations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='buyer_notes',
            field=models.TextField(blank=True, help_text='Buyer notes (max 500 characters)', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='delivery_address',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Address can only contain letters, numbers, spaces, commas, periods, and hyphens', regex='^[a-zA-Z0-9\\s,.-]+$')]),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='farmer_notes',
            field=models.TextField(blank=True, help_text='Farmer notes (max 500 characters)', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='quantity',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Quantity must be at least 1')]),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='rejection_reason',
            field=models.TextField(blank=True, help_text='Reason for rejection (max 500 characters)', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='total_amount',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='Total amount must be greater than 0')]),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='unit_price',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='Unit price must be greater than 0')]),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='category_name_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_active', 'user_type'], name='active_user_type_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerlisting',
            index=models.Index(fields=['farmer', 'status'], name='farmer_status_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerlisting',
            index=models.Index(fields=['status', 'created_at'], name='status_created_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerlisting',
            index=models.Index(fields=['product_name'], name='product_name_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['listing'], name='product_category_listing_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['category'], name='product_category_category_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['buyer', 'status'], name='buyer_status_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['listing', 'status'], name='listing_status_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['status', 'created_at'], name='reservation_status_created_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['approved_by'], name='approved_by_idx'),
        ),
        migrations.AddConstraint(
            model_name='buyerprofile',
            constraint=models.CheckConstraint(condition=models.Q(('buyer__user_type', 'Buyer')), name='buyer_profile_user_type'),
        ),
        migrations.AddConstraint(
            model_name='buyerprofile',
            constraint=models.CheckConstraint(condition=models.Q(('location__isnull', True), models.Q(('location__exact', ''), _negated=True), _connector='OR'), name='buyer_location_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='buyerprofile',
            constraint=models.CheckConstraint(condition=models.Q(('preferred_delivery_method', 'pickup'), models.Q(('delivery_address__isnull', True), _negated=True), _connector='OR'), name='delivery_address_required'),
        ),
        migrations.AddConstraint(
            model_name='buyerprofile',
            constraint=models.CheckConstraint(condition=models.Q(('date_of_birth__isnull', True), ('date_of_birth__lte', datetime.date(2025, 6, 26)), _connector='OR'), name='birth_date_not_future'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.CheckConstraint(condition=models.Q(('name__exact', ''), _negated=True), name='category_name_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.CheckConstraint(condition=models.Q(('name__exact', models.F('name__title'))), name='category_name_title_case'),
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.CheckConstraint(condition=models.Q(('email__exact', models.F('email__lower'))), name='email_lowercase'),
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.CheckConstraint(condition=models.Q(('user_type__in', ['Farmer', 'Buyer', 'Admin'])), name='valid_user_type'),
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.CheckConstraint(condition=models.Q(('first_name__isnull', True), models.Q(('first_name__exact', ''), _negated=True), _connector='OR'), name='first_name_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.CheckConstraint(condition=models.Q(('last_name__isnull', True), models.Q(('last_name__exact', ''), _negated=True), _connector='OR'), name='last_name_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='farmerlisting',
            constraint=models.CheckConstraint(condition=models.Q(('farmer__user_type', 'Farmer')), name='listing_farmer_user_type'),
        ),
        migrations.AddConstraint(
            model_name='farmerlisting',
            constraint=models.CheckConstraint(condition=models.Q(('farmer__is_approved', True)), name='listing_farmer_approved'),
        ),
        migrations.AddConstraint(
            model_name='farmerlisting',
            constraint=models.CheckConstraint(condition=models.Q(('product_name__exact', ''), _negated=True), name='product_name_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='farmerlisting',
            constraint=models.CheckConstraint(condition=models.Q(('price__gt', 0)), name='price_positive'),
        ),
        migrations.AddConstraint(
            model_name='farmerlisting',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gt', 0)), name='quantity_positive'),
        ),
        migrations.AddConstraint(
            model_name='farmerlisting',
            constraint=models.CheckConstraint(condition=models.Q(('status__in', ['Available', 'Sold', 'Reserved'])), name='valid_listing_status'),
        ),
        migrations.AddConstraint(
            model_name='farmerprofile',
            constraint=models.CheckConstraint(condition=models.Q(('farmer__user_type', 'Farmer')), name='farmer_profile_user_type'),
        ),
        migrations.AddConstraint(
            model_name='farmerprofile',
            constraint=models.CheckConstraint(condition=models.Q(('location__isnull', True), models.Q(('location__exact', ''), _negated=True), _connector='OR'), name='farmer_location_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='productcategory',
            constraint=models.UniqueConstraint(fields=('listing', 'category'), name='unique_listing_category'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('buyer__user_type', 'Buyer')), name='reservation_buyer_user_type'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('buyer__is_approved', True)), name='reservation_buyer_approved'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gt', 0)), name='reservation_quantity_positive'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__gt', 0)), name='reservation_unit_price_positive'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('total_amount__gt', 0)), name='reservation_total_amount_positive'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('total_amount', django.db.models.expressions.CombinedExpression(models.F('quantity'), '*', models.F('unit_price')))), name='reservation_total_calculation'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('delivery_method', 'pickup'), models.Q(('delivery_address__isnull', True), _negated=True), _connector='OR'), name='delivery_address_required_for_delivery'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('status__in', ['pending', 'approved', 'rejected', 'payment_pending', 'paid', 'ready_for_pickup', 'completed', 'cancelled'])), name='valid_reservation_status'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('status', 'approved'), _negated=True), models.Q(('approved_at__isnull', True), _negated=True), _connector='OR'), name='approved_at_required_when_approved'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('status', 'rejected'), _negated=True), models.Q(('rejection_reason__isnull', True), _negated=True), _connector='OR'), name='rejection_reason_required_when_rejected'),
        ),
    ]
